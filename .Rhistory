# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = Type);plot(parks$geometry, col = geometry, add = TRUE)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "blue");plot(parks$geometry, col = "red", add = TRUE)
# Load the raster package
library(raster)
# Read in the mound elevation single-band raster
elevation <- raster("data/DNK_msk_alt.grd")
# Read in the orthophoto image multi-band raster
aarhus <- brick("data/Aarhus_1m.TIF")
View(aarhus)
# Get the class for the new objects
class(elevation)
class(aarhus)
# Identify how many layers each object has
nlayers(elevation)
nlayers(aarhus)
View(elevation)
View(elevation)
View(elevation)
View(aarhus)
View(aarhus)
aarhus
forests
View(forests)
crs(forests)
crs(forests)
crs_forests["ID"]
crs_forests <- crs(forests)
crs_forests["ID"]
crs_forests <- crs(forests)
crs_forests
class(crs_forests)
crs_forests
crs_forests[-10]
crs_forests[-10]
crs_forests[:-10]
crs(forests)
# Chunk 1: setup
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
# Chunk 3
crs(forests)
# Chunk 1: setup
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
# Chunk 3
crs(forests)
# Chunk 1: setup
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
# Chunk 3
crs(forests)
# Chunk 1: setup
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
# Chunk 3
crs(forests)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
# Load the sf package
library(sf)
# Read in the forests shapefile
forests <- read_sf("data/forests.shp")
# Read in the parks shapefile
parks <- read_sf("data/parks.shp")
# Read in the playgrounds shapefile
playgrounds <- read_sf("data/playgrounds4326.shp")
# Read in the shelters json
shelters <- st_read("data/shelters.json")
# View the first few features of all layers
head(forests)
head(parks)
head(playgrounds)
head(shelters)
# Load the sf package
library(sf)
# ... and the dplyr package
library(dplyr)
# Use filter() to limit to over5ha parks
over5ha <- parks %>%
filter(areal_m2 > 50000) #50,000 m2 is 5 hector
# Count the number of rows
nrow(over5ha)
# Limit to navn and areal_m2 variables
over5_lim <- over5ha %>%
select(navn, areal_m2)
# Use head() to look at the first few records
head(over5_lim)
# load tidyverse
library(tidyverse)
# Create a standard, non-spatial data frame with one column
df <- data.frame(a = 1:3)
# Add a list column to your data frame
df$b <- list(1:4, 1:5, 1:10)
# Look at your data frame with head
head(df)
# Convert your data frame to a tibble and print on console
df <- tibble(df)
# Pull out the third observation from both columns individually
df$a[3]
df$b[3]
# This will not work
result <- st_area(parks)
result > 100000
# This will work
val <- 100000
which(unclass(result) > val)
# This will work
units(val) <- units(result)
which(result > val)
length(which(result > val))
# Compute the areas of the forests
forests$areas <- st_area(forests)
# Create a quick histogram of the areas using hist
hist(areas)
# Compute the areas of the forests
forests$areas <- st_area(forests)
# Create a quick histogram of the areas using hist
hist(areas)
# Compute the areas of the forests
forests$areas <- st_area(forests)
# Create a quick histogram of the areas using hist
hist(areas)
# Compute the areas of the forests
forests$areas <- st_area(forests)
# Create a quick histogram of the areas using hist
hist(forests$areas)
# Filter to forests greater than 30000 (square meters)
big_forests <- forests %>% filter(unclass(areas) > 200000)
# Can you plot the forests with their names?
plot(big_forests["navn"])
# Plot just the geometry of big_forests
plot(st_geometry(big_forests))
# Create a quick histogram of the areas using hist
hist(forests$areas)
# Compute the areas of the forests
forests$areas <- st_area(forests)
# Create a quick histogram of the areas using hist
hist(forests$areas)
# Filter to forests greater than 30000 (square meters)
big_forests <- forests %>% filter(unclass(areas) > 200000)
# Can you plot the forests with their names?
plot(big_forests["navn"])
# Plot just the geometry of big_forests
plot(st_geometry(big_forests))
# Compute the areas of the forests
forests$areas <- st_area(forests)
# Create a quick histogram of the areas using hist
hist(forests$areas)
# Filter to forests greater than 30000 (square meters)
big_forests <- forests %>% filter(unclass(areas) > 200000)
# Can you plot the forests with their names?
plot(big_forests["navn"])
# Plot just the geometry of big_forests
plot(st_geometry(big_forests))
# Plot the forests object using all defaults
plot(forests)
# Plot just the areal_m2 attribute of the forests data
plot(forests["areal_m2"])
# Create a new object of just the forests geometry
forests_geo <- st_geometry(forests)
# Plot the geometry of the forests data
plot(forests_geo)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "blue");plot(parks$geometry, col = "red", add = TRUE)
# Load the raster package
library(raster)
# Read in the mound elevation single-band raster
elevation <- raster("data/DNK_msk_alt.grd")
# Read in the orthophoto image multi-band raster
aarhus <- brick("data/Aarhus_1m.TIF")
# Get the class for the new objects
class(elevation)
class(aarhus)
# Identify how many layers each object has
nlayers(elevation)
nlayers(aarhus)
View(elevation)
View(aarhus)
aarhus
# Chunk 1: setup
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
# Chunk 3
crs(forests)
# Chunk 1: setup
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
# Chunk 3
crs(forests)
# Chunk 1: setup
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
# Chunk 3
crs(forests)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen=999)
# Load the sf package
library(sf)
# Read in the forests shapefile
forests <- read_sf("data/forests.shp")
# Read in the parks shapefile
parks <- read_sf("data/parks.shp")
# Read in the playgrounds shapefile
playgrounds <- read_sf("data/playgrounds4326.shp")
# Read in the shelters json
shelters <- st_read("data/shelters.json")
# View the first few features of all layers
head(forests)
head(parks)
head(playgrounds)
head(shelters)
crs(forests)
# Load the sf package
library(sf)
# ... and the dplyr package
library(dplyr)
# Use filter() to limit to over5ha parks
over5ha <- parks %>%
filter(areal_m2 > 50000) #50,000 m2 is 5 hector
# Count the number of rows
nrow(over5ha)
# Limit to navn and areal_m2 variables
over5_lim <- over5ha %>%
select(navn, areal_m2)
# Use head() to look at the first few records
head(over5_lim)
# load tidyverse
library(tidyverse)
# Create a standard, non-spatial data frame with one column
df <- data.frame(a = 1:3)
# Add a list column to your data frame
df$b <- list(1:4, 1:5, 1:10)
# Look at your data frame with head
head(df)
# Convert your data frame to a tibble and print on console
df <- tibble(df)
# Pull out the third observation from both columns individually
df$a[3]
df$b[3]
# This will not work
result <- st_area(parks)
result > 100000
# This will work
val <- 100000
which(unclass(result) > val)
# This will work
units(val) <- units(result)
which(result > val)
length(which(result > val))
# Compute the areas of the forests
forests$areas <- st_area(forests)
# Create a quick histogram of the areas using hist
hist(forests$areas)
# Filter to forests greater than 30000 (square meters)
big_forests <- forests %>% filter(unclass(areas) > 200000)
# Can you plot the forests with their names?
plot(big_forests["navn"])
# Plot just the geometry of big_forests
plot(st_geometry(big_forests))
# Plot the forests object using all defaults
plot(forests)
# Plot just the areal_m2 attribute of the forests data
plot(forests["areal_m2"])
# Create a new object of just the forests geometry
forests_geo <- st_geometry(forests)
# Plot the geometry of the forests data
plot(forests_geo)
# Plot the geometry of the forests and the parks object together
plot(forests_geo, col = "blue");plot(parks$geometry, col = "red", add = TRUE)
# Load the raster package
library(raster)
# Read in the mound elevation single-band raster
elevation <- raster("data/DNK_msk_alt.grd")
# Read in the orthophoto image multi-band raster
aarhus <- brick("data/Aarhus_1m.TIF")
# Get the class for the new objects
class(elevation)
class(aarhus)
# Identify how many layers each object has
nlayers(elevation)
nlayers(aarhus)
aarhus
aarhus["Band_1"]
aarhus$Band_1
plot(aarhus)
aarhus
nlayers(aarhus)
View(aarhus)
plot(aarhus)
stacked <- stack(aarhus)
plot(stacked)
stacked <- stack(aarhus)
plot(stacked)
extent(aarhus)
# Get the extent of the elevation and aarhus object
extent(elevation)
# Get the extent of the elevation and aarhus object
extent(elevation)
extent(aarhus)
# Get the CRS of the aarhus and elevation object
CRS(elevation)
# Determine the number of grid cells in both raster objects
ncell(aarhus)
# Get the extent of the elevation and aarhus object
extent(elevation)
extent(aarhus)
# Get the CRS of the aarhus and elevation object
CRS(elevation)
# Get the extent of the elevation and aarhus object
extent(elevation)
extent(aarhus)
# Get the CRS of the aarhus and elevation object
CRS(elevation)
# Get the CRS of the aarhus and elevation object
crs(elevation)
crs(aarhus)
# Plot the elevation raster (single raster)
plot(elevation)
# Plot the aarhus raster (as a single image for each layer)
plot(aarhus)
# Plot the aarhus raster as an image
plotRGB(aarhus)
# Plot the aarhus raster as an image
plotRGB(aarhus)
# Plot the aarhus raster as an image
plotRGB(aarhus, stretch = "linear")
# Plot the aarhus raster as an image
plotRGB(aarhus, stretch = "lin")
# Plot the elevation raster (single raster)
plot(elevation)
plotRGB(aarhus, elevation)
plot(elevation, aarhus)
plot(elevation, aarhus, extent = F)
plot(elevation, aarhus, extent = T)
# Determine the CRS for the elevation and playgrounds vector objects
crs(forests)
crs(playgrounds)
# Assign the CRS to playgrounds
crs_1 <- 4326
st_crs(playgrounds) <- crs_1
crs(playgrounds)
# Determine the CRS for the aarhus and elevation rasters
crs(aarhus)
crs(elevation)
# Write here the proj4string for the aarhus layer
crs_2 <- "+proj=longlat +ellps=WGS84 +no_defs"
# Plot aarhus and playgrounds (run both lines together)
# Do you see the playgrounds?
plot(aarhus, stretch = "lin")
plot(playgrounds, add = TRUE)
plot(aarhus, stretch = "lin")
plot(playgrounds, add = TRUE)
plotRGB(aarhus, stretch = "lin")
plot(playgrounds, add = TRUE)
# Simply run the tmap code
library(tmap)
plotRGB(aarhus, stretch = "lin")
plot(playgrounds, add = TRUE)
library(tmamp)
library(tmap)
plotRGB(aarhus, stretch = "lin")
plot(playgrounds, add = TRUE)
# Get the CRS from the aarhus object
the_crs <- crs(aarhus, asText = TRUE)
# Get the CRS from the aarhus object
the_crs <- crs(aarhus, asText = TRUE)
# Project playgrounds to match the CRS of aarhus
playgrounds_crs <- st_transform(playgrounds, crs = the_crs)
# Project elevation to match the CRS of aarhus
elevation_crs <- projectRaster(elevation, crs = the_crs, method = "ngb")
# Look at the CRS to see if they match
st_crs(playgrounds_crs)
st_crs(elevation_crs)
# Get the CRS from the aarhus object
the_crs <- crs(aarhus, asText = TRUE)
# Project playgrounds to match the CRS of aarhus
playgrounds_crs <- st_transform(playgrounds, crs = the_crs)
# Project elevation to match the CRS of aarhus
elevation_crs <- projectRaster(elevation, crs = the_crs, method = "ngb")
# Look at the CRS to see if they match
st_crs(playgrounds_crs)
st_crs(elevation_crs)
plotRGB(aarhus, stretch = "lin")
plot(playgrounds, add = TRUE)
# Look at the CRS to see if they match
st_crs(playgrounds_crs)
st_crs(elevation_crs)
plotRGB(aarhus, stretch = "lin")
plot(playgrounds, add = TRUE)
# Plot aarhus and playgrounds (run both lines together)
# Do you see the playgrounds?
playgrounds <- st_transform(playgrounds, crs = the_crs)
plotRGB(aarhus, stretch = "lin")
plot(playgrounds, add = TRUE)
plotRGB(aarhus, stretch = "lin", alpha = 100)
plot(playgrounds, add = TRUE, color = "green", lwd = 3)
plotRGB(aarhus, stretch = "lin", alpha = 100)
plot(playgrounds, add = TRUE, col = "green", lwd = 3)
library(tmap)
tm_shape(aarhus) +
tm_rgb() +
tm_shape(parks) +
tm_polygons(col = "green") +
tm_shape(playgrounds_crs) +
tm_dots(col = "yellow",
size = 1)
library(raster)
elevation <- getData(name = "alt", country = "DNK", mask = TRUE)
View(elevation)
municipalities <- getData(name = "GADM", country = "DNK", level = 2)
DK_border <- getData(name = "GADM", country = "DNK", level = 0)
